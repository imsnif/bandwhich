# The way this works is the following:
#
# - create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# - build-release job runs only once create-release is finished. It gets
# the release upload URL from create-release job outputs, then builds
# the release executables for each supported platform and attaches them
# as release assets to the previously created release.
#
# Reference:
# - https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/
#
# Currently this workflow only ever creates drafts; the draft should be checked
# and then released manually.

name: release
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: create_release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          # draft: ${{ github.event_name == 'workflow_dispatch' }}
          draft: true
          prerelease: false

  build-release:
    name: build-release
    needs: create-release
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      BANDWHICH_GEN_DIR: assets
      PKGDIR: github-actions-pkg
    strategy:
      matrix:
        build:
          - android-aarch64
          - linux-aarch64-gnu
          - linux-aarch64-musl
          - linux-armv7-gnueabihf
          - linux-armv7-musleabihf
          - linux-x64-gnu
          - linux-x64-musl
          - macos-aarch64
          - macos-x64
          - windows-x64-msvc
        include:
          - os: ubuntu-latest # default
          - cargo: cargo # default; overwrite with `cross` if necessary
          - build: android-aarch64
            target: aarch64-linux-android
            cargo: cross
          - build: linux-aarch64-gnu
            target: aarch64-unknown-linux-gnu
            cargo: cross
          - build: linux-aarch64-musl
            target: aarch64-unknown-linux-musl
            cargo: cross
          - build: linux-armv7-gnueabihf
            target: armv7-unknown-linux-gnueabihf
            cargo: cross
          - build: linux-armv7-musleabihf
            target: armv7-unknown-linux-musleabihf
            cargo: cross
          - build: linux-x64-gnu
            target: x86_64-unknown-linux-gnu
          - build: linux-x64-musl
            target: x86_64-unknown-linux-musl
          - build: macos-aarch64
            # Go back ot `macos-latest` after migration is complete
            # See https://github.blog/changelog/2024-04-01-macos-14-sonoma-is-generally-available-and-the-latest-macos-runner-image/.
            os: macos-14
            target: aarch64-apple-darwin
          - build: macos-x64
            os: macos-14
            target: x86_64-apple-darwin
          - build: windows-x64-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.cargo == 'cross'
        # The latest release of `cross` is not able to build/link for `aarch64-linux-android`
        # See: https://github.com/cross-rs/cross/issues/1222
        # This is fixed on `main` but not yet released. To avoid a breakage somewhen in the future
        # pin the cross revision used to the latest HEAD at 04/2024.
        # Go back to taiki-e/install-action once cross 0.3 is released.
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cross
          git: https://github.com/cross-rs/cross.git
          rev: 085092c

      - name: Build release binary
        shell: bash
        env:
          RUSTFLAGS: "-C strip=symbols"
        run: |
          mkdir -p "$BANDWHICH_GEN_DIR"
          ${{ matrix.cargo }} build --verbose --release --target ${{ matrix.target }}

      - name: Collect build artifacts
        shell: bash
        env:
          BANDWHICH_BIN: ${{ contains(matrix.os, 'windows') && 'bandwhich.exe' || 'bandwhich' }}
        run: |
          mkdir "$PKGDIR"
          mv "target/${{ matrix.target }}/release/$BANDWHICH_BIN" "$PKGDIR"
          mv "$BANDWHICH_GEN_DIR" "$PKGDIR"

      - name: Tar release (Unix)
        if: ${{ !contains(matrix.os, 'windows') }}
        working-directory: ${{ env.PKGDIR }}
        run: tar cvfz bandwhich-${{ github.ref_name }}-${{ matrix.target }}.tar.gz *

      - name: Zip release (Windows)
        if: contains(matrix.os, 'windows')
        working-directory: ${{ env.PKGDIR }}
        run: Compress-Archive -Path * -DestinationPath bandwhich-${{ github.ref_name }}-${{ matrix.target }}.zip

      - name: Upload release archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARCHIVE_EXT: ${{ contains(matrix.os, 'windows') && 'zip' || 'tar.gz' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.PKGDIR }}/bandwhich-${{ github.ref_name }}-${{ matrix.target }}.${{ env.ARCHIVE_EXT }}
          asset_name: bandwhich-${{ github.ref_name }}-${{ matrix.target }}.${{ env.ARCHIVE_EXT }}
          asset_content_type: application/octet-stream
