# The way this works is the following:
#
# - create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# - build-release job runs only once create-release is finished. It gets
# the release upload URL from create-release job outputs, then builds
# the release executables for each supported platform and attaches them
# as release assets to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# - https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    branches:
      - actions
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}

  build-release:
    name: build-release
    needs: create-release
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build:
          - linux
          - macos
          - win-msvc
        include:
          - build: linux
            os: ubuntu-18.04
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: win-msvc
            os: windows-2019
            rust: stable

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install Rust
        if: matrix.build != 'linux'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}
  
      - name: Install Rust (linux)
        if: matrix.build == 'linux'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: x86_64-unknown-linux-musl

      - name: Build release binary
        if: matrix.build != 'linux'
        run: cargo build --verbose --release
        
      - name: Build release binary (linux generic)
        if: matrix.build == 'linux'
        run: cargo build --verbose --release --target x86_64-unknown-linux-musl

      - name: Strip release binary (macos)
        if: matrix.build == 'macos'
        run: strip "target/release/bandwhich"
        
      - name: Strip release binary (linux)
        if: matrix.build == 'linux'
        run: strip "target/x86_64-unknown-linux-musl/release"
        
      - name: Tar linux generic release (linux)
        if: matrix.build == 'linux'
        run: tar cvfz linux-generic.tar.gz "target/x86_64-unknown-linux-musl/release"
        
      - name: Upload release archive (mac)
        if: matrix.os == 'macos'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/release/bandwhich
          asset_name: bandwhich-${{ github.ref }}-${{ matrix.os }}
          asset_content_type: application/octet-stream
      
      - name: Upload release archive (linux)
        if: matrix.os == 'linux'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./linux-generic.tar.gz
          asset_name: bandwhich-v${{ github.ref }}-x86_64-unknown-linux-musl.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload Windows release archive
        if: matrix.os == 'windows-2019'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/release/bandwhich.exe
          asset_name: bandwhich-${{ github.ref }}-${{ matrix.os }}
          asset_content_type: application/octet-stream
